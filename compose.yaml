services:
  mongo:
    container_name: the-mongo
    image: mongo
    ports:
      - 27018:27017  # left: port on host machine (for external usage, e.g., terminal); right: port in the Docker (for internal usage, i.e., to be used by the ETL)
    command: mongod --port 27017 --quiet --logpath /dev/null
    logging:
      driver: none
    volumes:  # docker run -v /path/on/host:/path/inside/container <image_name>
      - ${SERVER_FOLDER_MONGODB}:/data/db
    networks:
      - network-i-etl
  ietl:
    container_name: the-etl
    image: ietl
    depends_on:
      - mongo
    env_file:
      - ${ABSOLUTE_PATH_ENV_FILE}  # this specifies that when one runs a "docker compose", a .env file should be next to it
    working_dir: /home/i-etl-deployed
    volumes:
      # we need to provide Docker the access to the folders where the data and the metadata files are
      # this is mandatory to access data in the host machine (otherwise Docker won't see any file outside those copied in the image)
      # each folder after the : represents a "view" over the folder in ${X}
      # While executing, the code will refer to /home/i-etl-deployed/...
      - ${SERVER_FOLDER_DATA_GENERATION}:/home/i-etl-deployed/synthetic-data
      - ${SERVER_FOLDER_METADATA}:/home/i-etl-deployed/metadata
      - ${SERVER_FOLDER_DATA}:/home/i-etl-deployed/real-data
      - ${SERVER_FOLDER_PIDS}:/home/i-etl-deployed/pids
      # - ${SERVER_FOLDER_TEST}:/home/i-etl-deployed/test
      - ${SERVER_FOLDER_LOG_ETL}:/home/i-etl-deployed/working-dir
    environment:
      - CONTEXT_MODE=${CONTEXT_MODE:-DEV}
      - ETL_ENV_FILE_NAME=${ETL_ENV_FILE_NAME:-.env}
    networks:
      - network-i-etl
networks:
  network-i-etl:
    name: network-i-etl
    driver: bridge