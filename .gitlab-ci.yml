tests:
  image: docker:cli
  stage: test
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - pwd
    - export CONTEXT_MODE="TEST"
    - export ETL_ENV_FILE_NAME=.env.ci
    - export ABSOLUTE_PATH_ENV_FILE=/builds/padme-development/external/better/data-cataloging/etl/.env.ci
    - echo "$CI_REGISTRY_IMAGE"
    - echo "$CI_COMMIT_REF_SLUG"
    - echo "$CI_REGISTRY_USER"
    - echo "$CI_REGISTRY_PASSWORD"
    - echo "$CI_REGISTRY"
    - echo "$DOCKER_IMAGE_NAME"
    - echo "$CI_COMMIT_TAG"
    #- docker build . --tag "$DOCKER_IMAGE_NAME"  
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker compose --env-file ${ABSOLUTE_PATH_ENV_FILE} up --exit-code-from "$DOCKER_IMAGE_NAME" --remove-orphans 
    - docker compose --env-file ${ABSOLUTE_PATH_ENV_FILE} down

docker-release:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG  # release when a commit is tagged with a version
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # release when a banch is merged to main or a commit is pushed to main
  script:
    - echo "Running the release job with version $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    name: "I-ETL $CI_COMMIT_TAG"
    description: "Release of I-ETL version $CI_COMMIT_TAG"
    #- docker push "$DOCKER_IMAGE_NAME"
    #- echo "$CI_COMMIT_BRANCH"
    #- echo "$CI_DEFAULT_BRANCH"
    #- |
      #if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      #  echo "will tag version with latest"
      #  docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
      #  echo "will push latest"
      #  docker push "$CI_REGISTRY_IMAGE:latest"
      #fi